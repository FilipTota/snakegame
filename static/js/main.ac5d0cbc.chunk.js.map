{"version":3,"sources":["components/Snake.js","components/Food.js","App.js","index.js"],"names":["Snake","this","props","snakeBlocks","map","block","i","style","left","top","className","key","Component","Food","getRandomCoordinates","Math","floor","random","initialState","food","speed","direction","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","blocks","head","length","push","shift","setInterval","document","onkeydown","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","enlargeSnake","increaseSpeed","newSnake","unshift","alert","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ac5d0cbc.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nclass Snake extends Component {\n    render() {\n        return(\n            <div>\n                {this.props.snakeBlocks.map((block, i) => {\n                    const style = {\n                        left: `${block[0]}%`,\n                        top: `${block[1]}%`\n                    }\n                    return(\n                        <div className=\"snake-block\" key={i} style={style}></div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nexport default Snake","import React, {Component} from 'react'\n\nclass Food extends Component {\n    render() {\n        const style = {\n            left: `${this.props.block[0]}%`,\n            top: `${this.props.block[1]}%`\n        }\n        return(\n            <div className=\"food\" style={style}></div>\n        )\n    }\n}\n\nexport default Food","import React, {Component} from 'react'\nimport Snake from './components/Snake'\nimport Food from './components/Food'\n\nconst getRandomCoordinates = () => {\n  let min = 1\n  let max = 98\n  let x = Math.floor((Math.random() * (max - min + 1) + min) /2) * 2\n  let y = Math.floor((Math.random() * (max - min + 1) + min) /2) * 2\n  return [x, y]\n}\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 200,    \n  direction: 'RIGHT',\n  snakeBlocks: [\n    [0, 0],\n    [2, 0]\n  ]\n}\n\nclass App extends Component {\n\n  state = initialState\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed)\n    document.onkeydown = this.onKeyDown\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders()\n    this.checkIfCollapsed()\n    this.checkIfEat()\n  }\n\n  onKeyDown = (e) => {\n    e = e || window.event\n    switch(e.keyCode) {\n      case 38:\n        this.setState({direction: 'UP'})\n        break\n      case 40:\n        this.setState({direction: 'DOWN'})\n        break\n      case 37:\n        this.setState({direction: 'LEFT'})\n        break\n      case 39:\n        this.setState({direction: 'RIGHT'})\n        break\n    }\n  }\n\n  moveSnake = () => {\n    let blocks = [...this.state.snakeBlocks]\n    let head = blocks[blocks.length - 1]\n\n    switch(this.state.direction) {\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]]\n        break\n      case 'LEFT':\n        head = [head[0] - 2, head[1]]\n        break\n      case 'DOWN':\n        head = [head[0], head[1] + 2]\n        break\n      case 'UP':\n        head = [head[0], head[1] - 2]\n        break\n    }\n    blocks.push(head)\n    blocks.shift()\n    this.setState({\n      snakeBlocks: blocks\n    })\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1]\n    if(head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver()\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeBlocks]\n    let head =  snake[snake.length - 1]\n    snake.pop()\n    snake.forEach(block => {\n      if(head[0] === block[0] && head[1] === block[1]) {\n        this.onGameOver()\n      }\n    })\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeBlocks[this.state.snakeBlocks.length - 1]\n    let food = this.state.food\n    if(head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      })\n      this.enlargeSnake()\n      this.increaseSpeed()\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeBlocks]\n    newSnake.unshift([])\n    this.setState({\n      snakeBlocks: newSnake\n    })\n  }\n\n  increaseSpeed() {\n    if(this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed + 10\n      })\n    }\n  }\n\n  onGameOver() {\n    alert(`Game is over. Snake lenght is ${this.state.snakeBlocks.length}`)\n    this.setState(initialState)\n  }\n\n  render() {\n    return(\n      <div className=\"field\" style={{top: 0, left: 0}}>\n        <Snake snakeBlocks={this.state.snakeBlocks} />\n        <Food block={this.state.food} />\n      </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}